// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String
  mssv        String?
  email       String   @unique
  phone       String?
  password    String
  role        Role     @default(student)
  status      UserStatus @default(active)
  created_at  DateTime @default(now())

  // Relations
  vehicles      Vehicle[]
  wallet        Wallet?
  transactions  Transaction[]
  system_logs   SystemLog[]

  @@map("users")
}

model Vehicle {
  id            Int         @id @default(autoincrement())
  user_id       Int
  license_plate String      @unique
  brand         String?
  model         String?
  vehicle_type  VehicleType @default(Xe_may)
  created_at    DateTime    @default(now())

  // Relations
  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parking_sessions ParkingSession[]

  @@map("vehicles")
}

model Wallet {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  balance    Decimal  @default(0.00) @db.Decimal(12, 2)
  updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @updatedAt @db.Timestamp(0)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("wallet")
}

model Transaction {
  id          Int             @id @default(autoincrement())
  user_id     Int
  type        TransactionType
  method      String?         @db.VarChar(50)
  amount      Decimal
  status      String          @default("Thành công")
  description String?
  created_at  DateTime        @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at], map: "IX_transactions_user_created")
  @@map("transactions")
}

model PaymentMethod {
  id         Int               @id @default(autoincrement())
  name       String
  type       String
  icon       String
  status     PaymentMethodStatus @default(active)
  created_at DateTime          @default(now())

  @@map("payment_methods")
  @@unique([name], map: "UQ_payment_methods_name")
}

model ParkingLot {
  id           Int      @id @default(autoincrement())
  name         String
  capacity     Int
  occupied     Int      @default(0)
  fee_per_turn Decimal  @default(2000.00)
  status       String   @default("Hoạt động")
  created_at   DateTime @default(now())

  // Relations
  parking_sessions ParkingSession[]

  @@map("parking_lots")
  @@unique([name], map: "UQ_parking_lots_name")
}

model ParkingSession {
  id                 Int           @id @default(autoincrement())
  vehicle_id         Int
  lot_id             Int?
  entry_time         DateTime      @default(now())
  exit_time          DateTime?
  fee                Decimal       @default(2000.00)
  status             SessionStatus @default(IN)
  recognition_method String        @default("Tự động")
  payment_status     PaymentStatus @default(Chua_thanh_toan)
  created_at         DateTime      @default(now())

  // Relations
  vehicle     Vehicle     @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  parking_lot ParkingLot? @relation(fields: [lot_id], references: [id], onDelete: SetNull)

  @@index([vehicle_id, entry_time], map: "IX_parking_sessions_vehicle_entry")
  @@index([status], map: "IX_parking_sessions_status")
  @@map("parking_sessions")
}

model Camera {
  id                    Int           @id @default(autoincrement())
  name                  String
  location              String?
  type                  CameraType
  status                String        @default("Hoạt động")
  ip_address            String?
  resolution            String?
  fps                   Int?
  last_activity         DateTime?
  recognition_accuracy  String?
  connection            String        @default("Online")
  battery               String?
  
  // Camera connection fields for external cameras (Yoosee, etc.)
  camera_brand          String?       // "Yoosee", "Hikvision", etc.
  rtsp_url              String?       // RTSP stream URL
  http_url              String?       // HTTP stream URL
  username              String?       // Camera username
  password              String?       // Camera password
  port                  Int?          // Camera port (default 554 for RTSP)
  channel               Int?          // Camera channel (usually 0 or 1)
  protocol              CameraProtocol @default(RTSP)
  
  // Stream settings
  main_stream_url       String?       // Main stream URL
  sub_stream_url        String?       // Sub stream URL
  audio_enabled         Boolean       @default(false)
  ptz_enabled           Boolean       @default(false) // Pan-Tilt-Zoom support
  
  // Device specific
  device_id             String?       // Unique device ID for Yoosee
  mac_address           String?       // MAC address
  serial_number         String?       // Serial number
  onvif_id              String?       // ONVIF ID (found on camera label)
  firmware_version      String?       // Firmware version
  
  created_at            DateTime      @default(now())
  updated_at            DateTime      @default(now()) @updatedAt

  // Relations
  alerts Alert[]

  @@map("cameras")
  @@unique([name], map: "UQ_cameras_name")
}

model Alert {
  id         Int       @id @default(autoincrement())
  camera_id  Int?
  type       String
  message    String?
  priority   Priority  @default(Trung_binh)
  created_at DateTime  @default(now())

  // Relations
  camera Camera? @relation(fields: [camera_id], references: [id], onDelete: SetNull)

  @@map("alerts")
}

model SystemLog {
  id         Int     @id @default(autoincrement())
  action     String
  user_id    Int?
  type       LogType @default(Other)
  created_at DateTime @default(now())

  // Relations
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@map("system_logs")
}

model SystemSetting {
  id            Int         @id @default(autoincrement())
  setting_key   String      @unique
  setting_value String
  setting_type  SettingType @default(string)
  description   String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now()) @updatedAt

  @@map("system_settings")
}

// Enums
enum Role {
  student
  admin
}

enum UserStatus {
  active
  inactive
}

enum VehicleType {
  Xe_may @map("Xe máy")
}

enum TransactionType {
  TOPUP
  FEE
  REFUND
}

enum PaymentMethodStatus {
  active
  inactive
}

enum SessionStatus {
  IN
  OUT
}

enum PaymentStatus {
  Chua_thanh_toan @map("Chưa thanh toán")
  Da_thanh_toan @map("Đã thanh toán")
  Hoan_tien @map("Hoàn tiền")
}

enum CameraType {
  Vao @map("Vào")
  Ra @map("Ra")
}

enum CameraProtocol {
  RTSP
  HTTP
  ONVIF
  Yoosee
  Custom
}

enum Priority {
  Cao @map("Cao")
  Trung_binh @map("Trung bình")
  Thap @map("Thấp")
}

enum LogType {
  Recognition
  Payment
  Vehicle
  Admin
  Other
}

enum SettingType {
  string
  number
  boolean
}