version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: eparking_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-eparking_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-eparking_password_2024}
      POSTGRES_DB: ${DB_DATABASE_NAME:-eParking_db}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - eparking_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-eparking_user} -d ${DB_DATABASE_NAME:-eParking_db}"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 20s

  # Backend API
  backend:
    build:
      context: ./BE
      dockerfile: Dockerfile
    container_name: eparking_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-5000}
      DB_HOST: postgres
      DB_USER: ${DB_USER:-eparking_user}
      DB_PASSWORD: ${DB_PASSWORD:-eparking_password_2024}
      DB_DATABASE_NAME: ${DB_DATABASE_NAME:-eParking_db}
      DB_PORT: 5432
      DATABASE_URL: "postgresql://${DB_USER:-eparking_user}:${DB_PASSWORD:-eparking_password_2024}@postgres:5432/${DB_DATABASE_NAME:-eParking_db}?schema=public"
      USE_PRISMA: ${USE_PRISMA:-true}
    ports:
      - "5001:5000"
    volumes:
      - ./BE:/app
      - /app/node_modules
    networks:
      - eparking_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 20s

  # Frontend React App
  frontend:
    build:
      context: ./FE
      dockerfile: Dockerfile
    container_name: eparking_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000}
      REACT_APP_ENVIRONMENT: ${NODE_ENV:-production}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - eparking_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 20s

  # Prisma Studio Database Management
  prisma-studio:
    build:
      context: ./BE
      dockerfile: Dockerfile
    container_name: eparking_prisma_studio
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: "postgresql://${DB_USER:-eparking_user}:${DB_PASSWORD:-eparking_password_2024}@postgres:5432/${DB_DATABASE_NAME:-eParking_db}?schema=public"
      PRISMA_SCHEMA_DISABLE_ADVISORY_LOCK: 1
      SKIP_PRISMA_VERSION_CHECK: 1
    ports:
      - "5555:5555"
    volumes:
      - ./BE:/app
      - /app/node_modules
    networks:
      - eparking_network
    command: ["npx", "prisma", "studio", "--port", "5555", "--hostname", "0.0.0.0", "--browser", "none"]
    user: backend
    working_dir: /app

  # Adminer for Database Management (optional)
  adminer:
    image: adminer:latest
    container_name: eparking_adminer
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - eparking_network
    environment:
      ADMINER_DEFAULT_SERVER: database
    profiles:
      - tools

networks:
  eparking_network:
    driver: bridge
    name: eparking_network

volumes:
  pg_data:
    driver: local
    name: eparking_pg_data
